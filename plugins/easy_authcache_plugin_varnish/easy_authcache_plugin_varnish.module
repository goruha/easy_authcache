<?php

define('EASY_AUTHCACHE_PLUGIN_VARNISH', 'easy_authcache_plugin_varnish');

define('EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_NONE', 0);
define('EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_ALL', 1);
define('EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_ROLEBASED', 2);
define('EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_USERBASED', 3);

define('EASY_AUTHCACHE_PLUGIN_VARNISH_PAGE_PREFIX', 'EAC');
define('EASY_AUTHCACHE_PLUGIN_VARNISH_ESI_PREFIX', 'EACESI');

global $is_varnish;

/**
 * Implementation hook_easy_authcache_plugin()
 */
function easy_authcache_plugin_varnish_init() {
  global $is_varnish;
  $is_varnish = TRUE;
}

/**
 * Implementation hook_easy_authcache_plugin()
 */
function easy_authcache_plugin_varnish_easy_authcache_plugin() {
  return array(EASY_AUTHCACHE_PLUGIN_VARNISH => t('Varnish'));
}

function easy_authcache_plugin_varnish_easy_authcache_plugin_theme_path() {
  return '';
}

function easy_authcache_plugin_varnish_easy_authcache_plugin_template_name() {
  return 'mock';
}

function easy_authcache_plugin_varnish_easy_authcache_plugin_use_replace() {
  global $is_varnish;
  return $is_varnish;
}

function easy_authcache_plugin_varnish_easy_authcache_plugin_prepare_mock_vars(&$vars, $hash) {
  // Use $_GET here to retrieve the original path in source form.
  $current_path = isset($_GET['q']) ? $_GET['q'] : '';
  $query = drupal_query_string_encode($_GET, array('q'));
  if ($query != '') {
    $current_path .= '?'. $query;
  }
  $current_path = base64_encode($current_path);
  $path = url("easy_authcache_plugin_varnish/$hash/$current_path", array('absolute' => TRUE));
  if (user_access('debug easy authcache varnish')) {
    $vars['debug'] = l($path ,$path, array('external' => TRUE));
  }
  $vars['path'] = $path;
}

function easy_authcache_plugin_varnish_menu() {
  $items = array();
  $items['easy_authcache_plugin_varnish/%'] = array(
    'title' => 'Easy authcache plugin varnish callback',
    'page callback' => 'easy_authcache_plugin_varnish_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

function easy_authcache_plugin_varnish_callback($hash, $current_url) {
  global $is_varnish;
  $is_varnish = FALSE;
  $current_url = base64_decode(arg(2));
  easy_authcache_plugin_varnish_set_current_url($current_url);
  // @TODO: Add user login for case we remove cookie in varnish
  $result = easy_authcache_get_dynamic_region_html($hash);
  print $result;
  die();
}

function easy_authcache_plugin_varnish_perm() {
  return array('debug easy authcache varnish');
}

// EAC Varnish cookies roles split manage


/**
 * Implementation of hook_user.
 *   For maximum cache-efficiency, the proxy must be able to identify the roles
 *   held by a user.  A cookie is used which provides a consistent hash for
 *   all users who share the same roles.
 *   For security, the hash uses a random seed which is rotated (by hook_cron)
 *   at regular intervals - defaults to daily.
 */
function easy_authcache_plugin_varnish_user($op, &$edit, &$account, $category = NULL) {
  // only respond to login/logout.
  if(!($op == 'login' || $op == 'logout')) {
    return;
  }

  // Drupal session cookies use the name 'SESS' followed by an MD5 hash.
  // The role-cookie is the same, prefixes with the letter 'EAC'.
  _easy_authcache_set_cookie(EASY_AUTHCACHE_PLUGIN_VARNISH_PAGE_PREFIX, easy_authcache_plugin_varnish_page_cache_rule(), $account,  $op == 'logout');
  _easy_authcache_set_cookie(EASY_AUTHCACHE_PLUGIN_VARNISH_ESI_PREFIX, easy_authcache_plugin_varnish_esi_cache_rule(), $account,  $op == 'logout');
}

function _easy_authcache_set_cookie($prefix, $rule, $account, $delete = FALSE) {
  $name = $prefix . session_name();
  if (!$delete) {
    switch ($rule) {
      case EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_NONE:
      case EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_ALL:
        $hash = NULL;
        break;
      case EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_ROLEBASED:
        $hash = _easy_authcache_plugin_varnish_get_roles_hash(array_keys($account->roles));
        break;
      case EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_USERBASED:
        $hash = _easy_authcache_plugin_varnish_get_roles_hash(array($account->uid));
        break;
    }
    if ($hash) {
      $session_options = session_get_cookie_params();
      $life_time = $session_options['lifetime'];
      setcookie($name, $hash, time() + $life_time, '/');
    }
  }
  else {
    setcookie($name, 'deleted', 1, '/');
  }

}

/**
 * Get the hash for a set of roles.
 *
 * @param array $rids
 *   An array of role-ids
 */
function _easy_authcache_plugin_varnish_get_roles_hash($rids) {
  $seed = _easy_authcache_plugin_varnish_get_seed_key();
  sort($rids);
  $hash = implode(':', $rids);
  $hash = md5($seed . md5($hash));
  return $hash;
}

/**
 * Get the current seed key.
 */
function _easy_authcache_plugin_varnish_get_seed_key() {
  $seed = variable_get('easy_authcache_plugin_varnish_seed_key', FALSE);
  if(!$seed) {
    $seed = _easy_authcache_plugin_varnish_rotate_seed_key();
  }
  return $seed;
}

/**
 * Rotate the seed key.
 */
function _easy_authcache_plugin_varnish_rotate_seed_key() {
  $seed = _easy_authcache_plugin_varnish_get_random_seed();
  variable_set('easy_authcache_plugin_varnish_seed_key', $seed);
  variable_set('easy_authcache_plugin_varnish_seed_key_last_changed', time());
  return $seed;
}

/**
 * Get a random 32-character string
 */
function _easy_authcache_plugin_varnish_get_random_seed() {
  $seed = '';
  for($i=0; $i<32; $i++) {
    // get a random character from the printable ASCII character set: 32-176
    $seed += chr(mt_rand(32, 176));
  }
  return $seed;
}

// Varnish UI

/**
 * Implementation hook_easy_authcache_config()
 * @return array
 */
function easy_authcache_plugin_varnish_easy_authcache_config() {
  $items = array();

  $cache_options = array(
    EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_NONE => t('No cache'),
    EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_ALL => t('Cache for all users'),
    EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_ROLEBASED => t('Cache for roles'),
    EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_USERBASED => t('Cache for user'),
  );

  $items['varnish'] = array(
    '#type' => 'fieldset',
    '#title' => t('Varnish configuration'),
    '#description' => t('Varnish configuration'),
    '#collapsible' => TRUE,
  );

  $items['varnish']['easy_authcache_plugin_varnish_page_rule'] = array(
    '#type' => 'radios',
    '#title' => t('Page cache rule'),
    '#description' => t('Rule to split cache for page'),
    '#default_value' => easy_authcache_plugin_varnish_page_cache_rule(),
    '#options' => $cache_options,
  );

  $items['varnish']['easy_authcache_plugin_varnish_esi_rule'] = array(
    '#type' => 'radios',
    '#title' => t('ESI cache rule'),
    '#description' => t('Rule to split cache for esi regions'),
    '#default_value' => easy_authcache_plugin_varnish_esi_cache_rule(),
    '#options' => $cache_options,
  );

  return $items;
}

function easy_authcache_plugin_varnish_esi_cache_rule() {
  return variable_get('easy_authcache_plugin_varnish_esi_rule', EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_ROLEBASED);
}

function easy_authcache_plugin_varnish_page_cache_rule() {
  return variable_get('easy_authcache_plugin_varnish_page_rule', EASY_AUTHCACHE_PLUGIN_VARNISH_CACHE_ROLEBASED);
}

function easy_authcache_plugin_varnish_set_current_url($url) { // Parse getted current url and set q and other values to global array
// to make drupal think that current request was from that url
  $url_parts = parse_url($url);
  $_SERVER['REQUEST_URI'] = preg_replace("/[-a-zA-Z0-9@:%_\+.~#?&\/\/=]{2,256}\.[a-z]{2,4}\)?/i", '', $url);
  $_GET['q'] = ltrim(urldecode($url_parts['path']), '/');
  $params = array();
  if (isset($url_parts['query'])) {
    foreach (explode('&', $url_parts['query']) as $param) {
      $key_value = explode('=', $param);
      $params[$key_value[0]] = urldecode($key_value[1]);
    }
  }

// For some links that use destination we should back to current page
  if (isset($params['destination'])) {
    $destination = ltrim($_GET['q'], '/') . '?' . drupal_authcache_query_string_encode($params);
    $_REQUEST['destination'] = urlencode($destination);
  }
  $_GET = array_merge($_GET, $params);
}
