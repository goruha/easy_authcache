<?php
define('EASY_AUTHCACHE_PLUGIN_VARNISH', 'easy_authcache_plugin_varnish');
global $is_varnish;

/**
 * Implementation hook_easy_authcache_plugin()
 */
function easy_authcache_plugin_varnish_init() {
  global $is_varnish;
  $is_varnish = TRUE;
}

/**
 * Implementation hook_easy_authcache_plugin()
 */
function easy_authcache_plugin_varnish_easy_authcache_plugin() {
  return array(EASY_AUTHCACHE_PLUGIN_VARNISH => t('Varnish'));
}

function easy_authcache_plugin_varnish_easy_authcache_plugin_theme_path() {
  return '';
}

function easy_authcache_plugin_varnish_easy_authcache_plugin_template_name() {
  return 'mock';
}

function easy_authcache_plugin_varnish_easy_authcache_plugin_use_replace() {
  global $is_varnish;
  return $is_varnish;
}

function easy_authcache_plugin_varnish_easy_authcache_plugin_prepare_mock_vars(&$vars, $hash) {
  $path = url("easy_authcache_plugin_varnish/$hash", array('absolute' => TRUE));
  if (user_access('debug easy authcache varnish')) {
    $vars['debug'] = l($path ,$path, array('external' => TRUE));
  }
  $vars['path'] = $path;
}

function easy_authcache_plugin_varnish_menu() {
  $items = array();
  $items['easy_authcache_plugin_varnish/%'] = array(
    'title' => 'Easy authcache plugin varnish callback',
    'page callback' => 'easy_authcache_plugin_varnish_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

function easy_authcache_plugin_varnish_callback($hash) {
  global $is_varnish;
  $is_varnish = FALSE;
  // @TODO: Add user login for case we remove cookie in varnish
  $result = easy_authcache_get_dynamic_region_html($hash);
  return $result;
}

function easy_authcache_plugin_varnish_perm() {
  return array('debug easy authcache varnish');
}

// EAC Varnish cookies roles split manage


/**
 * Implementation of hook_user.
 *   For maximum cache-efficiency, the proxy must be able to identify the roles
 *   held by a user.  A cookie is used which provides a consistent hash for
 *   all users who share the same roles.
 *   For security, the hash uses a random seed which is rotated (by hook_cron)
 *   at regular intervals - defaults to daily.
 */
function easy_authcache_plugin_varnish_user($op, &$edit, &$account, $category = NULL) {
  // only respond to login/logout.
  if(!($op == 'login' || $op == 'logout')) {
    return;
  }

  // Drupal session cookies use the name 'SESS' followed by an MD5 hash.
  // The role-cookie is the same, prefixes with the letter 'EAC'.
  $cookie = array('name' => 'EAC' . session_name());

  if($op == 'login') {
    $hash = _easy_authcache_plugin_varnish_get_roles_hash(array_keys($account->roles));
    $session_options = session_get_cookie_params();
    $life_time = $session_options['lifetime'];
    $cookie += array(
      'value' => $hash,
      'expire' => time() + $life_time,
    );
  }
  else {
    $cookie += array(
      'value' => 'deleted',
      'expire' => 1,
    );
  }
  setcookie($cookie['name'], $cookie['value'], $cookie['expire'], '/');
}

/**
 * Get the hash for a set of roles.
 *
 * @param array $rids
 *   An array of role-ids
 */
function _easy_authcache_plugin_varnish_get_roles_hash($rids) {
  $seed = _easy_authcache_plugin_varnish_get_seed_key();
  $hash = implode(':', $rids);
  $hash = md5($seed . md5($hash));
  return $hash;
}

/**
 * Get the current seed key.
 */
function _easy_authcache_plugin_varnish_get_seed_key() {
  $seed = variable_get('easy_authcache_plugin_varnish_seed_key', FALSE);
  if(!$seed) {
    $seed = _easy_authcache_plugin_varnish_rotate_seed_key();
  }
  return $seed;
}

/**
 * Rotate the seed key.
 */
function _easy_authcache_plugin_varnish_rotate_seed_key() {
  $seed = _easy_authcache_plugin_varnish_get_random_seed();
  variable_set('easy_authcache_plugin_varnish_seed_key', $seed);
  variable_set('easy_authcache_plugin_varnish_seed_key_last_changed', time());
  return $seed;
}

/**
 * Get a random 32-character string
 */
function _easy_authcache_plugin_varnish_get_random_seed() {
  $seed = '';
  for($i=0; $i<32; $i++) {
    // get a random character from the printable ASCII character set: 32-176
    $seed += chr(mt_rand(32, 176));
  }
  return $seed;
}



