<?php
// $Id$



/**
 * @file
 * File provide implementation of easy authcache api for drupal blocks
 */

define('EASY_AUTHCACHE_BLOCK_ID', 'easy_authcache_block');

// Admininstation part implementation

/**
 *
 * Implementation hook_form_alter();
 *
 */
function easy_authcache_block_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'block_admin_configure' :
      $form['easy_authcache_block_settings'] = array(
        '#type' => 'fieldset', 
        '#title' => t('Ajax reload settings'), 
        '#description' => t('This settings used my module !module for configing authcache ajax', array(
          '!module' => 'easy_authcache_block')), 
        '#weight' => 0);
      
      $params = _easy_authcache_block_block_settings_get_variable($form['module']['#value'], $form['delta']['#value']);
      
      $form['easy_authcache_block_settings']['easy_authcache_block_block_load_dynamic'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Download by ajax'), 
        '#description' => t('This block will be downloaded by ajax on pages cached by authcache'), 
        '#default_value' => $params['use_ajax']);
      
      $form['easy_authcache_block_settings']['easy_authcache_block_block_just_run_block'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Just run by ajax'), 
        '#description' => t('If selected block would not overloaded by ajax but will be processed on server side'), 
        '#default_value' => $params['just_run']);
      
      $form['#submit'][] = 'easy_authcache_block_admin_configure_submit';
      break;
    default :
      break;
  }
}

/**
 *
 * Submit function to save easy authcache block specific settings
 *
 * @param  array $form
 * @param  array $form_state
 */
function easy_authcache_block_admin_configure_submit($form, &$form_state) {
  $module = $form_state['values']['module'];
  $delta = $form_state['values']['delta'];
  $value['use_ajax'] = $form_state['values']['easy_authcache_block_block_load_dynamic'];
  $value['just_run'] = $form_state['values']['easy_authcache_block_block_just_run_block'];
  _easy_authcache_block_block_settings_set_variable($module, $delta, $value);
}

/**
 *
 * Get easy authcache block specific settings
 *
 * @param string $module module name provided block
 * @param  string $delta block delta
 * @return array
 *
 */
function _easy_authcache_block_block_settings_get_variable($module, $delta) {
  $result = db_select('easy_authcache_blocks')
    ->fields('easy_authcache_blocks', array('use_ajax', 'just_run'))
    ->condition('module', $module, '=')
    ->condition('delta', $delta, '=')
    ->execute()
    ->fetchAssoc();
  return $result;
}

/**
 *
 * Get easy authcache block specific settings
 *
 * @param string $module module name provided block
 * @param string $delta block delta
 * @param array $value value to set array('use_ajax' => $x, 'just_run' => $y)
 *
 */
function _easy_authcache_block_block_settings_set_variable($module, $delta, $value) {
  db_delete('easy_authcache_blocks')
    ->condition('module', $module, '=')
    ->condition('delta', $delta, '=')
    ->execute();
  $block_id = _easy_authcache_block_block_id($module, $delta);
  db_insert('easy_authcache_blocks')
    ->fields(array(
      'module' => $module,
      'delta' => $delta,
      'block_id' => $block_id,
      'use_ajax' => $value['use_ajax'],
      'just_run' => $value['just_run'],
    ))
    ->execute();
}

/**
 *
 * Return block id based on module and delta
 *
 * @param string $module module name provided block
 * @param string $delta block delta
 * @return string
 */
function _easy_authcache_block_block_id($module, $delta) {
  return $module . '_' . $delta;
}

// Easy authcache implementation 

function easy_authcache_block_easy_authcache_register() {
  $items[] = array(
    'theme' => 'block',
    'mock callback' => 'easy_authcache_block_block_dynamic_load',
    'callback' => 'easy_authcache_block_callback'
  );
  return $items;
}
/**
 *
 * Callback for overriden theme
 *
 * @param  $vars
 * @return void
 */
function easy_authcache_block_block_dynamic_load(&$vars) {
  // Get configs
  $conf = _easy_authcache_block_block_settings_get_variable($vars['block']->module, $vars['block']->delta);
  // If get this block with ajax
  if ($conf['use_ajax']) {
    $block_id = _easy_authcache_block_block_id($vars['block']->module, $vars['block']->delta);
    $params = array(
      'region' => $vars['block']->region, 
      'block_id' => $block_id);
    return array(
      'id' => $block_id, 
      'params' => $params);
  }
  return null;
}

/**
 *
 * Implementation hook_authcache_cached()
 *
 * @param  $data
 * @return array
 */
function easy_authcache_block_callback($data) {
  global $theme_key;
  global $user;
  
  if (empty($data)) {
    return '';
  }
  
  $block_id = $data['block_id'];
    
  // Rehash blocks for current theme
  _block_rehash();
  
  // Get current user roles
  $rids = array_keys($user->roles);

  $query = db_select('blocks', 'b');
  $query->join('easy_authcache_blocks', 'ccb', 'ccb.module = b.module AND ccb.delta = b.delta');
  $query->leftJoin('blocks_roles', 'r', 'b.module = r.module AND b.delta = r.delta');
  $block = $query
    ->fields('b')
    ->fields('ccb', array('block_id'))
    ->condition('ccb.block_id', $block_id)
    ->condition('b.theme', $theme_key)
    ->condition(db_or()
      ->condition('r.rid', $rids, 'IN')
      ->isNull('r.rid'))
    ->range(0,1)
    ->execute()
    ->fetchObject();

  /*
  $sql = "SELECT DISTINCT b.*, ccb.block_id  FROM  {blocks} b
    JOIN {easy_authcache_blocks} ccb ON ccb.module = b.module AND ccb.delta = b.delta AND b.theme = '%s'
    LEFT JOIN {blocks_roles} r ON b.module = r.module AND b.delta = r.delta
    WHERE (r.rid IN (" . db_placeholders($rids) . ") OR r.rid IS NULL) AND ccb.block_id = '%s' LIMIT 0,1";
  // we need to add  b.status = 1 AND for sites used with out context

  $sql = db_rewrite_sql($sql, 'b', 'bid');
  // Get blocks
  $result = db_query($sql, array_merge(array($theme_key), $rids, array($block_id)));
  // Fill blocks array
  $block = db_fetch_object($result);
  */

  // Process each block
  $block->region = $data['region'];

  if (! ($block->throttle && (module_invoke('throttle', 'status') > 0))) {
    // Try fetching the block from cache. Block caching is not compatible with
    // node_access modules. We also preserve the submission of forms in blocks,
    // by fetching from cache only if the request method is 'GET'.
    if (! count(module_implements('node_grants')) && $_SERVER['REQUEST_METHOD'] == 'GET' && ($cid = _block_get_cache_id($block)) && ($cache = cache_get($cid, 'cache_block'))) {
      $array = $cache->data;
    }
    else {
      $array = module_invoke($block->module, 'block', 'view', $block->delta);
      if (isset($cid)) {
        cache_set($cid, $array, 'cache_block', CACHE_TEMPORARY);
      }
    }
    
    if (isset($array) && is_array($array)) {
      foreach ($array as $k => $v) {
        $block->$k = $v;
      }
    }
  }
  
  if (isset($block->content) && $block->content) {
    // Override default block title if a custom display title is present.
    if ($block->title) {
      // Check plain here to allow module generated titles to keep any markup.
      $block->subject = $block->title == '<none>' ? '' : check_plain($block->title);
    }
    if (! isset($block->subject)) {
      $block->subject = '';
    }
  }
  
  $output = theme('block', $block);
  return $output;
}
